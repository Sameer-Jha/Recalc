{"version":3,"sources":["components/InputGrid.js","components/Display.js","App.js","serviceWorker.js","index.js"],"names":["Panel","useState","ip","ip_handler","push","val","prev","clear","backspace","substring","length","calculate","console","log","eval","toFixed","id","className","onClick","Display","props","App","InputGrid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ytBAIMA,MAAQ,SAARA,QAAc,IAAD,UAEUC,oDAAS,IAFnB,+LAERC,GAFQ,cAEJC,WAFI,cAITC,KAAO,SAACC,GACVF,YAAW,SAACG,GAAD,OAAWA,EAAKD,MAGzBE,MAAQ,WACVJ,YAAW,SAACG,GAAD,MAAW,OAGpBE,UAAY,WACdL,YAAW,SAACG,GACR,MAAmB,kBAATA,EACCA,EAAKG,UAAU,EAAGH,EAAKI,OAAS,GAGhC,OAObC,UAAY,SAAZA,YACFC,QAAQC,IAAIX,IAEZ,IAAIG,IAAMS,KAAKZ,IAAIa,QAAQ,GAC3BH,QAAQC,IAAIR,KACZF,YAAW,SAACG,GAAD,OAAWD,QAI1B,OACI,uEACA,0EACI,2DAAC,wCAAD,CAASA,IAAKH,MAElB,sEAASc,GAAG,SACZ,kEAAKC,UAAU,cACf,qEAAQC,QAASV,WAAjB,KACA,qEAAQU,QAASX,OAAjB,MACA,qEAAQW,QAAS,kBAAMd,KAAK,OAA5B,KACA,qEAAQc,QAAS,kBAAMd,KAAK,OAA5B,MAEA,kEAAKa,UAAU,OACf,qEAAQC,QAAS,kBAAMd,KAAK,OAA5B,KACA,qEAAQc,QAAS,kBAAMd,KAAK,OAA5B,KACA,qEAAQc,QAAS,kBAAMd,KAAK,OAA5B,KACA,qEAAQa,UAAU,SAASC,QAAS,kBAAMd,KAAK,OAA/C,MAEA,kEAAKa,UAAU,OACf,qEAAQC,QAAS,kBAAMd,KAAK,OAA5B,KACA,qEAAQc,QAAS,kBAAMd,KAAK,OAA5B,KACA,qEAAQc,QAAS,kBAAMd,KAAK,OAA5B,KACA,qEAAQa,UAAU,SAAUC,QAAS,kBAAMd,KAAK,OAAhD,MAEA,kEAAKa,UAAU,OACf,qEAAQC,QAAS,kBAAMd,KAAK,OAA5B,KACA,qEAAQc,QAAS,kBAAMd,KAAK,OAA5B,KACA,qEAAQc,QAAS,kBAAMd,KAAK,OAA5B,KACA,qEAAQa,UAAU,SAAUC,QAAS,kBAAMd,KAAK,OAAhD,MAEA,kEAAKa,UAAU,MAAMD,GAAG,SACxB,qEAAQC,UAAU,SAASC,QAAS,kBAAMd,KAAK,OAA/C,KACA,qEAAQc,QAAS,kBAAMd,KAAK,OAA5B,KACA,qEAAQa,UAAU,SAAUC,QAASP,WAArC,SAOOX,6B,6BC9Ef,0BAaemB,IAVC,SAACC,GAEb,OACI,yBAAKJ,GAAG,aACHI,EAAMf,O,2MCSJgB,MATf,WAEE,OACE,yBAAKJ,UAAU,OACb,kBAACK,EAAA,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.649900fa.chunk.js","sourcesContent":["import React,{useState} from 'react'\nimport Display from './Display'\nimport './InputGrid.css'\n\nconst Panel = () =>{\n\n    const [ip, ip_handler] = useState('') \n    \n    const push = (val) => {\n        ip_handler((prev) => (prev+val))\n    }\n\n    const clear = () => {\n        ip_handler((prev) => (''))\n    }\n\n    const backspace = () =>{\n        ip_handler((prev) => {\n            if(typeof prev === 'string'){\n                return prev.substring(0, prev.length - 1)\n            }\n            else {\n                return ''\n            }\n        }\n        )\n    }\n\n\n    const calculate = () => {\n        console.log(ip)\n        // eslint-disable-next-line\n        let val = eval(ip).toFixed(2)  \n        console.log(val)\n        ip_handler((prev) => (val))\n    }\n\n\n    return(\n        <main>\n        <section>\n            <Display val={ip}/>\n        </section>\n        <section id='panel'>\n        <div className='row orange'>\n        <button onClick={backspace}>C</button>\n        <button onClick={clear}>AC</button>\n        <button onClick={() => push('%')}>%</button>\n        <button onClick={() => push('/')}>/</button>\n        </div>\n        <div className='row'>\n        <button onClick={() => push('1')}>1</button>\n        <button onClick={() => push('2')}>2</button>\n        <button onClick={() => push('3')}>3</button>\n        <button className='orange' onClick={() => push('*')}>x</button>\n        </div>\n        <div className='row'>\n        <button onClick={() => push('4')}>4</button>\n        <button onClick={() => push('5')}>5</button>\n        <button onClick={() => push('6')}>6</button>\n        <button className='orange'  onClick={() => push('-')}>-</button>\n        </div>\n        <div className='row'>\n        <button onClick={() => push('7')}>7</button>\n        <button onClick={() => push('8')}>8</button>\n        <button onClick={() => push('9')}>9</button>\n        <button className='orange'  onClick={() => push('+')}>+</button>\n        </div>\n        <div className='row' id=\"lower\">\n        <button className='orange' onClick={() => push('.')}>.</button>\n        <button onClick={() => push('0')}>0</button>\n        <button className='orange'  onClick={calculate}>=</button>\n        </div>\n        </section>\n        </main>\n    )\n} \n\nexport default Panel","import React from 'react'\nimport './Display.css'\n\nconst Display = (props) =>{\n\n    return (\n        <div id='input_box'>\n            {props.val}\n        </div>\n\n    )\n}\n\nexport default Display","import React from 'react';\nimport './App.css';\n\n// importing components\n// import Display from './components/Display'\nimport InputGrid from './components/InputGrid'\n\nfunction App() {\n\n  return (\n    <div className=\"app\">\n      <InputGrid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}